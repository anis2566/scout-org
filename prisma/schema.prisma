// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  Admin
  User
  Scout
  ScoutLeader
}

enum Status {
  Pending
  Active
  Verified
  Suspended
}

enum Section {
  Cub
  Scout
  Rover 
}

enum CommiteeSection {
  PackCouncil
  TroopCouncil
  CrewCouncil
  GroupCommitee
}

enum CouponStatus {
  Active
  Inactive
}

enum NoticeStatus {
  Active
  Inactive
}

enum AppStatus {
  Pending
  Approved
  Rejected
}

enum PaymentStatus {
  Paid
  Unpaid
}

enum TrainingType {
  National 
  Region
  District
}

enum PublishStatus {
  Publish
  Unpublish
}

enum Designation {
  President
  VicePresident
  Secretary
  JointSecretary
  Treasrer
  GroupScoutLeader
  Advisor
  Sponsor
  UnitLeader
  AssistantUnitLeader
  Member
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?         @db.Text
  emailVerified DateTime?
  image         String?
  role          Role            @default(User)
  status        Status          @default(Pending)

  fcmToken      String?         @db.Text
  scout Scout?
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, id])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier])
}
 

 model Unit {
  id String @id @default(uuid())
  name String
  limit Int
  section Section

  leaderId String? @unique
  leader Scout? @relation(name: "UnitLeader", fields: [leaderId], references: [id])

  scouts Scout[]
  migrations Migration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Scout {
  id String @id @default(uuid())
  name String
  nameBangla String
  apsId String?
  fatherName String
  motherName String
  dob DateTime
  gender String
  phone String
  religion String
  email String?
  bloodGroup String?
  villageHouse String
  roadBlockSector String
  district String
  division String
  thana String
  postCode String?
  scoutType String
  experience String[] @default([])
  joinDate DateTime?
  section Section
  memberType String
  badge String?
  role String[] @default([])
  scoutRegion String
  scoutDistrict String
  scoutUpazilla String?
  institute String?
  class String?
  roll String?
  organization String?
  designation String?
  imageUrl String
  certificateNo String?
  courseDateSatrt DateTime?
  courseDateEnd DateTime?
  status Status @default(Pending)
  isVerified Boolean @default(false)
  isPaid Boolean @default(false)
  allowCard Boolean @default(false)

  preferedUnitId String?
  preferedUnitName String?
  
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  unitId String?
  unit Unit? @relation(fields: [unitId], references: [id])

  leadingUnit Unit? @relation(name: "UnitLeader")

  migrations Migration[]
  bans Ban[]
  eventApplications EventApplication[]
  trainingApplications TrainingApplication[]
  awards ScoutAward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fee {
  id String @id @default(uuid())
  title String
  amount Int
  discountAmount Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Coupon {
  id String @id @default(uuid())
  title String
  code String
  value Int
  expire DateTime @default(now())
  status CouponStatus @default(Inactive)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Event {
  id String @id @default(uuid())
  title String
  description String
  venue String
  imageUrl String
  entryFee Int
  eventStart DateTime
  eventEnd DateTime
  registrationStart DateTime
  registrationEnd DateTime

  applications EventApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model EventApplication {
  id String @id @default(uuid())

  scoutId String?
  scout Scout? @relation(fields: [scoutId], references: [id])

  eventId String?
  event Event? @relation(fields: [eventId], references: [id])

  paymentStatus PaymentStatus @default(Unpaid)
  status AppStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Training {
  id String @id @default(uuid())
  title String
  description String
  venue String
  imageUrl String
  limit Int
  type TrainingType
  trainingStart DateTime
  trainingEnd DateTime

  applications TrainingApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TrainingApplication {
  id String @id @default(uuid())
  attachments String[]

  scoutId String?
  scout Scout? @relation(fields: [scoutId], references: [id])

  trainingId String?
  training Training? @relation(fields: [trainingId], references: [id])
  
  status AppStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Award {
  id String @id @default(uuid())
  title String
  imageUrl String

  awards ScoutAward[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Migration {
  id String @id @default(uuid())
  reason String

  scoutId String?
  scout Scout? @relation(fields: [scoutId], references: [id])

  unitId String?
  unit Unit? @relation(fields: [unitId], references: [id])

  status AppStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Ban {
  id String @id @default(uuid())
  reason String

  scoutId String?
  scout Scout? @relation(fields: [scoutId], references: [id])

  status AppStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model ScoutAward {
  scoutId String
  scout Scout @relation(fields: [scoutId], references: [id])

  awardId String
  award Award @relation(fields: [awardId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@id([scoutId, awardId])
}


model Committee {
  id String @id @default(uuid())
  title String
  section CommiteeSection
  start DateTime @default(now())
  end DateTime

  members CommitteeMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model CommitteeMember {
  id String @id @default(uuid())
  name String
  designation Designation
  imageUrl String

  committeeId String
  committee Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model News {
  id String @id @default(uuid())
  title String
  news String @db.Text
  imageUrl String

  status PublishStatus @default(Unpublish)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Notice {
  id String @id @default(uuid())
  notice String @db.Text

  status NoticeStatus @default(Inactive)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Gallery {
  id String @id @default(uuid())
  title String
  imageUrl String

  media GalleryMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model GalleryMedia {
  id String @id @default(uuid())
  title String
  imageUrl String

  galleryId String
  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}