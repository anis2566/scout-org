// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  Admin
  User
  Scout
  ScoutLeader
}

enum Status {
  Pending
  Active
  Verified
  Suspended
}

enum Section {
  Cub
  Scout
  Rover 
}

enum CommiteeSection {
  PackCouncil
  TroopCouncil
  CrewCouncil
  GroupCommitee
}

enum CouponStatus {
  Active
  Inactive
}

enum MigrationStatus {
  Pending
  Approved
  Rejected
}

enum PaymentStatus {
  Paid
  Unpaid
}

enum TrainingType {
  National 
  Region
  District
}

enum SignatureAuthor {
  MD
  Manager
  Accountant
}

enum PublishStatus {
  Publish
  Unpublish
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?         @db.Text
  emailVerified DateTime?
  image         String?
  role          Role            @default(User)
  status        Status          @default(Pending)

  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, id])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier])
}
 

 model Unit {
  id String @id @default(uuid())
  name String
  limit Int
  section Section

  // leaderId String? @unique
  // leader Scout? @relation(name: "UnitLeader", fields: [leaderId], references: [id])

  // scouts Scout[]
  // migrations Migration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
